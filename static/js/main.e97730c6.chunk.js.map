{"version":3,"sources":["firebase.js","DishForm.js","ListDishes.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DishForm","props","handleNameChangeEvent","event","setState","name","target","value","handleDishChangeEvent","dish","handleSubmit","addDish","state","type","preventDefault","selectDishType","console","log","onSubmit","this","onChange","id","Component","ListDishes","dishes","map","singleDish","key","onClick","deleteDish","Counter","appetizers","salads","mains","desserts","i","App","fetchDishes","database","ref","on","snapshot","data","val","dishesArray","propertyName","dishObject","push","dishId","child","remove","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e97730c6.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCV6MxKgqcAYlaavVFCzRQwwfhh4aUcvp4\",\n  authDomain: \"kristen-scheel-project5.firebaseapp.com\",\n  databaseURL: \"https://kristen-scheel-project5.firebaseio.com\",\n  projectId: \"kristen-scheel-project5\",\n  storageBucket: \"kristen-scheel-project5.appspot.com\",\n  messagingSenderId: \"233635611396\",\n  appId: \"1:233635611396:web:f58311c363c48f20c4c651\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\n\nclass DishForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: '', dish: '' };\n  }\n\n  handleNameChangeEvent = (event) => {\n    this.setState({ name: event.target.value });\n  }\n\n  handleDishChangeEvent = (event) => {\n    this.setState({ dish: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    this.props.addDish(this.state.name, this.state.dish, this.state.type);\n    event.preventDefault();\n    this.setState({\n      name: \"\",\n      dish: \"\",\n      type: \"appetizer\"\n    })\n  }\n\n  selectDishType = (event) => {\n    this.setState({ type: event.target.value });\n    console.log(event.target.value);\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n            <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleNameChangeEvent}/>\n        </label>\n        <label>\n          Dish:\n            <input type=\"text\" name=\"dish\" value={this.state.dish} onChange={this.handleDishChangeEvent}/>\n        </label>\n        <select id=\"dishType\" name=\"Type\" value={this.state.type} onChange={this.selectDishType}>\n          <option value=\"appetizer\">Appetizer</option>\n          <option value=\"salad\">Salad</option>\n          <option value=\"main\">Main</option>\n          <option value=\"dessert\">Dessert</option>\n        </select>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    )\n  }\n}\n\nexport default DishForm; ","import React, { Component } from 'react';\n\nclass ListDishes extends Component {\n  constructor(props) {\n    super(props);\n    console.log(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>List of Dishes</h1>\n        <ul>\n          {\n            this.props.dishes.map((singleDish) => {\n              return (\n              <li key={singleDish.id}>{singleDish.name} {singleDish.dish}\n                <button onClick={ () => this.props.deleteDish(singleDish.id)}>Delete this dish</button>\n                </li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default ListDishes;\n","import React, { Component } from 'react';\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.setState ({type: \"appetizer\"});\n  }\n\n  render() {\n    let appetizers = 5;\n    let salads = 5;\n    let mains = 5;\n    let desserts = 5;\n\n    const dishes = this.props.dishes;\n    for (let i in this.props.dishes) {\n      if (dishes[i].type == \"appetizer\") {\n        appetizers = appetizers - 1;\n      } else if (dishes[i].type == \"salad\") {\n        salads = salads - 1;\n      } else if (dishes[i].type == \"main\") {\n        mains = mains - 1;\n      } else if (dishes[i].type == \"dessert\") {\n        desserts = desserts - 1;\n      }\n    }\n\n    return (\n    <div>\n      <h2>We still need {appetizers} appetizers</h2>\n      <h2>We still need {salads} salads</h2>\n      <h2>We still need {mains} mains</h2>\n      <h2>We still need {desserts} desserts</h2>\n    </div>\n    )\n  }\n}\n\nexport default Counter; ","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport './App.css';\nimport DishForm from './DishForm';\nimport ListDishes from './ListDishes';\nimport Counter from './Counter';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      dishes: []\n    }\n  }\n\n  componentDidMount() {\n    this.fetchDishes();\n  }\n\n  fetchDishes = () => {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (snapshot) => {\n      const data = snapshot.val();\n      const dishesArray = [];\n\n      for (let propertyName in data) {\n        const dishObject = {\n          id: propertyName,\n          name: data[propertyName][\"name\"],\n          dish: data[propertyName][\"dish\"],\n          type: data[propertyName][\"type\"]\n        }\n        dishesArray.push(dishObject);\n      }\n\n      this.setState({\n        dishes: dishesArray\n      })\n    })\n  }\n\n  deleteDish = (dishId) => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(dishId).remove();\n  }\n\n  addDish = (name, dish, type) => {\n    const dbRef = firebase.database().ref();\n    dbRef.push({ name: name, dish: dish, type: type });\n    this.fetchDishes();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Potluck!</h1>\n        <Counter dishes={this.state.dishes}/>\n        <DishForm addDish={this.addDish}/>\n        <ListDishes dishes={this.state.dishes} deleteDish={this.deleteDish}/>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}