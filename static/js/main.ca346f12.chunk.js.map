{"version":3,"sources":["firebase.js","Header.js","Counter.js","DishOptions.js","DishForm.js","ListDishes.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","class","Component","Counter","props","dishTypeNeeded","DishOptions","dishType","value","disabled","label","DishForm","handleNameChangeEvent","event","setState","name","target","handleDishChangeEvent","dish","handleSubmit","addDish","state","type","dietaryRestrictions","preventDefault","handleDietaryChange","restrictions","checked","push","filter","restriction","selectDishType","numServings","servings","dishes","i","this","onSubmit","maxlength","onChange","required","id","for","includes","ListDishes","renderDietaryRestrictions","length","join","map","singleDish","key","onClick","deleteDish","Footer","App","fetchDishes","database","ref","on","snapshot","data","val","dishesArray","propertyName","dishObject","dishId","child","remove","appetizer","salad","main","dessert","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ca346f12.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCV6MxKgqcAYlaavVFCzRQwwfhh4aUcvp4\",\n  authDomain: \"kristen-scheel-project5.firebaseapp.com\",\n  databaseURL: \"https://kristen-scheel-project5.firebaseio.com\",\n  projectId: \"kristen-scheel-project5\",\n  storageBucket: \"kristen-scheel-project5.appspot.com\",\n  messagingSenderId: \"233635611396\",\n  appId: \"1:233635611396:web:f58311c363c48f20c4c651\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\n\nclass Header extends Component {\n  render() {\n    return (\n      <div class=\"headBox\">\n        <h1>Potluck</h1>\n        <h2>Friday, August 28, 2020</h2>\n        <h2>Fairmont Park</h2>\n      </div>\n    )\n  }\n}\n\nexport default Header;","import React from 'react';\n\n// function component which displays the number of dishes of a particular category that are still needed.\nconst Counter = (props) => {\n  return (\n    <div class=\"counter\">\n      <h2>Sign Up To Bring a Dish</h2>\n      <h3>We need: {props.dishTypeNeeded(\"appetizer\")} appetizers, {props.dishTypeNeeded(\"salad\")} salads, {props.dishTypeNeeded(\"main\")} mains & {props.dishTypeNeeded(\"dessert\")} desserts.</h3>\n    </div>\n  )\n}\n\nexport default Counter; ","import React from 'react';\n\n//function component that checks if the number of dishes in the category is 0. If it is, disable the option on the select menu on the dropdown menu so that users can no longer select this category.\nconst DishOptions = (props) => {\n  if ( props.dishTypeNeeded(props.dishType) == 0 ) {\n    return (\n      <option value={props.dishType} disabled>{props.label}</option>\n    );\n  } else {\n    return (\n      <option value={props.dishType}>{props.label}</option>\n    );\n  }\n}\n\nexport default DishOptions;\n\n","import React, { Component } from 'react';\nimport Counter from './Counter';\nimport DishOptions from './DishOptions';\n\nclass DishForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: '', dish: '', type: 'chooseOne', dietaryRestrictions: [] };\n  }\n\n  //function grabs what user is typing in name field on form, and uses it to set the state\n  handleNameChangeEvent = (event) => {\n    this.setState({ name: event.target.value });\n  }\n\n  //function grabs what user is typing in the dish field on form, and usese it to set the state\n  handleDishChangeEvent = (event) => {\n    this.setState({ dish: event.target.value });\n  }\n\n  //function grabs the different parts of the form (name, dish, type, dietary restrictions), calls the addDish function (from App.js) to push the data to firebase, then reset form state to blank/default.\n  handleSubmit = (event) => {\n    this.props.addDish(this.state.name, this.state.dish, this.state.type, this.state.dietaryRestrictions);\n    event.preventDefault();\n    this.setState({\n      name: \"\",\n      dish: \"\",\n      type: \"chooseOne\",\n      dietaryRestrictions: []\n    })\n  }\n\n  //function handles adding and removing dietary restrictions\n  handleDietaryChange = (event) => {\n\n    //copy the array in order to manipulate\n    let restrictions = [...this.state.dietaryRestrictions];\n\n    //if new restriction was added, push it onto the array\n    if (event.target.checked) {\n      restrictions.push(event.target.value);\n    } else {\n      //if one of the checkboxes was checked, and then unchecked, remove it from the list\n      restrictions = restrictions.filter((restriction) => {return restriction != event.target.value});\n    }\n\n    //set state of new array (restricitons)\n    this.setState({ \n      dietaryRestrictions: restrictions\n    });\n  }\n  \n  // function to check what category of dish type user selects (appetizer, salad, main, dessert), and set state\n  selectDishType = (event) => {\n    this.setState({ type: event.target.value });\n  }\n\n  // function to calculate how many dishes of each type are still needed (by decrimenting the category by one if it matches the parameter value). \n  dishTypeNeeded = (dishType) => {\n    let numServings = this.props.servings[dishType];\n\n    const dishes = this.props.dishes;\n    for (let i in dishes) {\n      if (dishes[i].type == dishType) {\n        numServings = numServings - 1;\n      }\n    }\n    return numServings;\n  }\n\n  render() {\n    return (\n      <div class=\"formBox\">\n        <div class=\"box formBoxInterior wrapper\">\n            <Counter dishTypeNeeded={this.dishTypeNeeded} />\n            <form class=\"dishForm\" onSubmit={this.handleSubmit}>\n              <div class=\"formTop\">\n                <label class=\"formLabel formLabelTop\">Name: <input class=\"inputBox\" type=\"text\" name=\"name\" maxlength=\"20\" value={this.state.name} onChange={this.handleNameChangeEvent} required/></label>\n                <label class=\"formLabel formLabelTop\">Dish: <input class=\"inputBox\" type=\"text\" name=\"dish\" maxlength=\"30\" value={this.state.dish} onChange={this.handleDishChangeEvent} required/></label>\n              </div>\n              <select class=\"dishTypeSelect\" id=\"dishType\" name=\"Type\" value={this.state.type} onChange={this.selectDishType} required>\n                <option value=\"chooseOne\" disabled>select a category</option>\n                <DishOptions dishTypeNeeded={this.dishTypeNeeded} dishType={\"appetizer\"} label={\"Appetizer\"}/>\n                <DishOptions dishTypeNeeded={this.dishTypeNeeded} dishType={\"salad\"} label={\"Salad\"} />\n                <DishOptions dishTypeNeeded={this.dishTypeNeeded} dishType={\"main\"} label={\"Main\"} />\n                <DishOptions dishTypeNeeded={this.dishTypeNeeded} dishType={\"dessert\"} label={\"Dessert\"} /> \n              </select>\n              <div class=\"checkboxes\">\n                <h3>Check all that apply to your dish:</h3>\n                  <div class=\"checksOnly\">\n                    <div class=\"formLabel\">\n                      <label for=\"nut-free\">nut-free </label><input type=\"checkbox\" id=\"nut-free\" name=\"nut-free\" value=\"nut-free\" onChange={this.handleDietaryChange} checked={this.state.dietaryRestrictions.includes(\"nut-free\")}/>\n                    </div>\n                    <div class=\"formLabel\">\n                      <label for=\"vegan\">vegan </label><input type=\"checkbox\" id=\"vegan\" name=\"vegan\" value=\"vegan\" onChange={this.handleDietaryChange} checked={this.state.dietaryRestrictions.includes(\"vegan\")}/>\n                    </div>\n                    <div class=\"formLabel\">\n                      <label for=\"vegetarian\">vegetarian </label><input type=\"checkbox\" id=\"vegetarian\" name=\"vegetarian\" value=\"vegetarian\" onChange={this.handleDietaryChange} checked={this.state.dietaryRestrictions.includes(\"vegetarian\")}/>\n                    </div>\n                    <div class=\"formLabel\">\n                      <label for=\"gluten-free\">gluten-free </label><input type=\"checkbox\" id=\"gluten-free\" name=\"gluten-free\" value=\"gluten-free\" onChange={this.handleDietaryChange} checked={this.state.dietaryRestrictions.includes(\"gluten-free\")}/>\n                    </div>\n                  </div>\n                <input class=\"submitButton\" type=\"submit\" value=\"Submit\" />\n              </div>\n            </form>\n          </div>\n        </div>\n    )\n  }\n}\n\nexport default DishForm; ","import React, { Component } from 'react';\n\nclass ListDishes extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  //function to grab each dishes dietary info and contactenate, publish to the page\n  renderDietaryRestrictions = (restrictions) => {\n    if (restrictions.length == 0) {\n      return \"\";\n    } else { \n      return \"(\" + restrictions.join(\", \") + \")\";\n    }  \n  }\n\n  render() {\n    return (\n      <div class=\"whatTheyreBringing\">\n          <div class=\"box whatBringingBox wrapper\">\n            <div class=\"headingBringing\">\n              <h2>Here's What Everyone's Bringing:</h2>\n            </div>\n              <ul>\n                {\n                  (this.props.dishes.length == 0) ? <h3> No dishes yet. Be the first to sign up!</h3> :\n                  \n                  //mapping through each dish in the dishes array, printing to the page in an unordered list, adding a button to remove the dish\n                  this.props.dishes.map((singleDish) => {\n                    return (  \n                          <li key={singleDish.id}>{singleDish.name}: {singleDish.dish} {this.renderDietaryRestrictions(singleDish.restrictions)} <button onClick={ () => this.props.deleteDish(singleDish.id)}>Remove</button>\n                          </li>\n                    )\n                  })\n                }\n              </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ListDishes;\n","import React, { Component } from 'react'; \n\nclass Footer extends Component {\n  render() {\n    return (\n      <div class=\"footerBox\">\n        <p>Copyright 2020 Kristen Scheel</p>\n        <p>Juno College</p>\n      </div>\n    )\n  }\n}\n\n  export default Footer;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport './App.css';\nimport Header from './Header';\nimport DishForm from './DishForm';\nimport ListDishes from './ListDishes';\nimport Footer from './Footer';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    // setting the number of dishes of each type (appetizer, salad, main, dessert) needed.\n    const servings = {\n      appetizer: 5,\n      salad: 5, \n      main: 5,\n      dessert: 5\n    };\n\n    this.state = {\n      dishes: [],\n      servings: servings\n    }\n  }\n\n  //when component is rendered, run the function to get the dishes data from firebase\n  componentDidMount() {\n    this.fetchDishes();\n  }\n\n// function to get dishes data from firebase\n  fetchDishes = () => {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (snapshot) => {\n      const data = snapshot.val();\n      const dishesArray = [];\n\n      for (let propertyName in data) {\n        //pushing empty array to firebase returns \"null\", replacing null value with empty array.\n        const restrictions = data[propertyName][\"restrictions\"] == null ? [] : data[propertyName][\"restrictions\"];\n        const dishObject = {\n          id: propertyName,\n          name: data[propertyName][\"name\"],\n          dish: data[propertyName][\"dish\"],\n          type: data[propertyName][\"type\"],\n          restrictions: restrictions\n        }\n        dishesArray.push(dishObject);\n      }\n\n      this.setState({\n        dishes: dishesArray\n      })\n    })\n  }\n\n  //function to remove dishes from firebase\n  deleteDish = (dishId) => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(dishId).remove();\n  }\n\n  //function to add dishes to firebase\n  addDish = (name, dish, type, dietaryRestrictions ) => {\n    const dbRef = firebase.database().ref();\n    dbRef.push({ name: name, dish: dish, type: type, restrictions: dietaryRestrictions });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <DishForm addDish={this.addDish} dishes={this.state.dishes} servings={this.state.servings}/>\n        <ListDishes dishes={this.state.dishes} deleteDish={this.deleteDish}/>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}